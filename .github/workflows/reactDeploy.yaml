# 개발 환경에만 React를 쿠버네티스에 배포
name: reactDeploy
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev]
    paths:
      - "cicd/**"

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{runner.os}}-node-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          cd cicd
          npm ci
      - name: npm build
        run: |
          cd cicd
          npm run build

  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/Configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"
      - name: docker build & push
        run: |
          docker build -f Dockerfile --tag ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}} .
          docker push ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}}

  deploy:
    runs-on: ubuntu-latest
    needs: [image-build]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
      - name: setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      - name: setup helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1
      - name: access kubernetes
        run: |
          aws eks update-kubeconfig --name ${{vars.CLUSTER_NAME}}
      - name: deploy
        id: status
        run: |
          helm upgrade --install cicd kubernetes/cicd --create-namespace my-app-${{vars.SUFFIX}} \
          --set image.tag=${{github.sha}} \
          --set image.repository=${{secrets.REGISTRY}}/${{vars.REPOSITORY}}
      - name: notify
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "notification"
          SLACK_MESSAGE: "${{steps.status.outcome}}"
